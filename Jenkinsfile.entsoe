env.DATESTAMP = new Date().format("yyyy-MM-dd-HHmm")

stage('refresh') {
  podTemplate(yaml: """
kind: Pod
spec:
  containers:
    - name: app
      image: docker-registry:5000/intermittency:${env.TAG}
      command: ['/bin/cat']
      tty: true
      envFrom:
        - secretRef:
            name: intermittency
"""
  ) {
    node(POD_LABEL) {
      container('app') {
        sh 'cd /app ; scripts/sincedb-entsoe-generation.rb'
        sh 'cd /app ; scripts/sincedb-entsoe-load.rb'
        #sh 'cd /app ; scripts/sincedb-entsoe-windsolar.rb'
        sh 'cd /app ; scripts/sincedb-entsoe-price.rb'
        sh 'cd /app ; scripts/sincedb-svk-mimer-generation.rb'
        sh 'cd /app ; scripts/sincedb-svk-controlroom.rb'
      }
    }
  }
}

stage('build influxdb-preloaded') {
  podTemplate(yaml: '''
kind: Pod
spec:
  containers:
    - name: kaniko
      image: gcr.io/kaniko-project/executor:v1.6.0-debug
      command: ['/busybox/cat']
      tty: true
      securityContext:
        runAsUser: 0
        privileged: true
      resources:
        requests:
          memory: "3Gi"
          cpu: "1"
        limits:
          # memory: "3Gi"
          # cpu: "2.5"
      envFrom:
        - secretRef:
            name: intermittency
'''
  ) {
    node(POD_LABEL) {
      checkout scm
      container('kaniko') {
	sh """
/kaniko/executor -f Dockerfile.influxdb-preloaded \
		 -c . \
		 --cache=false \
		 --insecure \
		 --destination=docker-registry.docker-registry:5000/influxdb-preloaded:${env.DATESTAMP} \
		 --build-arg=INFLUX_DATABASE \
		 --build-arg=INFLUX_USERNAME \
		 --build-arg=INFLUX_PASSWORD \
		 --build-arg=INFLUX_HOST \
		 --build-arg=INFLUXDB_VERSION
"""
      }
    }
  }
}

stage('helmfile apply') {
  podTemplate(yaml: '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: helmfile
      image: quay.io/roboll/helmfile:helm3-v0.139.6
      command: ['cat']
      tty: true
  nodeSelector:
    kubernetes.io/arch: amd64
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
'''
  ) {
    node(POD_LABEL) {
      checkout scm
      container('helmfile') {
	sh "cd chart && helmfile apply --set image.tag=${env.DATESTAMP}"
      }
    }
  }
}
