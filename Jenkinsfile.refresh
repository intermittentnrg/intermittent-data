properties([
  disableConcurrentBuilds(),
  parameters([text('CMD')]),
  pipelineTriggers([cron('H */2 * * *')]),
  [$class: 'EnvInjectJobProperty', info: [
    loadFilesFromMaster: false,
    propertiesContent: "TAG=${env.TAG}\nBRANCH_NAME=${env.BRANCH_NAME}",
    secureGroovyScript: [classpath: [], oldScript: '', sandbox: false, script: '']],
    keepBuildVariables: true,
    keepJenkinsSystemVariables: true,
    on: true
  ],
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '50'))
])

currentBuild.description = params.CMD

podTemplate(yaml: """
kind: Pod
spec:
  containers:
    - name: app
      image: docker-registry:5000/intermittency:${env.TAG}
      command: ['/bin/cat']
      tty: true
      envFrom:
        - secretRef:
            name: intermittency-${env.BRANCH_NAME}
"""
) {
  node(POD_LABEL) {
    container('app') {
      if (params.CMD) {
        sh "cd /app ; ${params.CMD}"
      } else {
        stage('entsoe-generation') {
         sh 'cd /app ; scripts/sincedb-entsoe-generation.rb'
        }
        stage('entsoe-load') {
          sh 'cd /app ; scripts/sincedb-entsoe-load.rb'
        }
        stage('entsoe-price') {
          sh 'cd /app ; scripts/sincedb-entsoe-price.rb'
        }
        stage('entsoe-transmission') {
          sh 'cd /app ; scripts/sincedb-entsoe-transmission.rb'
        }
        stage('elexon-generation') {
          sh 'cd /app ; scripts/sincedb-elexon-generation.rb'
        }
        stage('elexon-load') {
          sh 'cd /app ; scripts/sincedb-elexon-load.rb'
        }
        stage('nordpool-transmission') {
          sh 'cd /app ; scripts/sincedb-nordpool-transmission.rb'
          sh 'cd /app ; scripts/sincedb-nordpool-capacity.rb'
        }
          //sh 'cd /app ; scripts/sincedb-entsoe-windsolar.rb'
          //sh 'cd /app ; scripts/sincedb-svk-mimer-generation.rb'
          //sh 'cd /app ; scripts/sincedb-svk-controlroom.rb'
      }
    }
  }
}
